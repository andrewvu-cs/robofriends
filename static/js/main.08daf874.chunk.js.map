{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","value","Scroll","props","style","overflowY","height","children","CounterButton","React","memo","color","useState","count","setCount","onClick","Header","App","searchField","useSelector","searchRobots","requestRobots","isPending","dispatch","useDispatch","updateSearchField","useCallback","event","payload","target","onRequestRobots","Axios","get","res","data","useEffect","filteredRobots","filter","toLowerCase","includes","length","marginTop","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.08daf874.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport 'tachyons';\n\nconst Card = ({id, name, email} )=> {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n      <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import React from \"react\";\n\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map(robot => (\n        <Card\n          key={robot.id}\n          id={robot.id}\n          name={robot.name}\n          email={robot.email}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n        value={searchfield}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div style={{ overflowY: \"scroll\", height: \"800px\"}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { useState } from \"react\";\n\nconst CounterButton = React.memo(({ color }) => {\n  const [count, setCount] = useState(0);\n  console.log(\"CounterButton\");\n  const updateCount = () => {\n    setCount(count + 1);\n  };\n  return (\n    <button color={color} onClick={() => updateCount()}>\n      Count: {count}\n    </button>\n  );\n});\n\nexport default CounterButton;\n","import React from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nconst Header = React.memo(() => {\n  console.log(\"Header\");\n  return (\n    <div>\n      <h1 className=\"f1\">RoboFriends</h1>\n      <CounterButton color={\"red\"} />\n    </div>\n  );\n});\n\nexport default Header;\n","import React, { useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport \"tachyons\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport Header from \"../components/Header\";\n\n// tell me whhat props i should listen to for actions to get dispatched\n\nfunction App() {\n  const searchField = useSelector(state => state.searchRobots.searchField);\n  const robots = useSelector(state => state.requestRobots.robots);\n  const isPending = useSelector(state => state.requestRobots.isPending);\n  // const error = useSelector(state => state.requestRobots.error);\n  const dispatch = useDispatch();\n\n  const updateSearchField = useCallback(\n    event => dispatch(setSearchField(event.target.value)),\n    [dispatch]\n  );\n\n  const onRequestRobots = useCallback(() => dispatch(requestRobots()), [\n    dispatch\n  ]);\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <Header/>\n      <SearchBox searchChange={updateSearchField} />\n\n      {!filteredRobots.length ? (\n        <h2 style={{ marginTop: \"50%\" }}>CANNOT COMPUTE...</h2>\n      ) : (\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\nimport Axios from \"axios\";\n\n// payload sending whatever data is needed\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  Axios.get(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: res.data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n    ;\n};\n\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware)\n);\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}